//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.1-b02-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2010.04.15 at 10:29:06 AM MESZ 
//


package org.deegree.igeo.config;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;


/**
 * 
 * 				A Toolbar may is defined for a complete project. It can be floatable, this means it can be moved by drag&drop into its own window and it
 * 				may use rollover effect. If the rollover state is true then the border of the toolbar buttons will be drawn only when the mouse pointer hovers over them. 
 * 				A Toolbar must have an unique identifier (this is for future usage, because it is planned having more than one toolbar) and may have 0..n entries.
 * 			
 * 
 * <p>Java class for ToolbarType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ToolbarType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{http://www.deegree.org/coremapmodel}identifier" minOccurs="0"/>
 *         &lt;element ref="{http://www.deegree.org/project}ToolBarEntry" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="floatable" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" />
 *       &lt;attribute name="useRollover" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" />
 *       &lt;attribute name="vertical" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ToolbarType", propOrder = {
    "identifier",
    "toolBarEntry"
})
public class ToolbarType {

    @XmlElement(namespace = "http://www.deegree.org/coremapmodel")
    protected IdentifierType identifier;
    @XmlElement(name = "ToolBarEntry")
    protected List<ToolbarEntryType> toolBarEntry;
    @XmlAttribute
    protected Boolean floatable;
    @XmlAttribute
    protected Boolean useRollover;
    @XmlAttribute
    protected Boolean vertical;

    /**
     * Gets the value of the identifier property.
     * 
     * @return
     *     possible object is
     *     {@link IdentifierType }
     *     
     */
    public IdentifierType getIdentifier() {
        return identifier;
    }

    /**
     * Sets the value of the identifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link IdentifierType }
     *     
     */
    public void setIdentifier(IdentifierType value) {
        this.identifier = value;
    }

    /**
     * Gets the value of the toolBarEntry property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the toolBarEntry property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getToolBarEntry().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ToolbarEntryType }
     * 
     * 
     */
    public List<ToolbarEntryType> getToolBarEntry() {
        if (toolBarEntry == null) {
            toolBarEntry = new ArrayList<ToolbarEntryType>();
        }
        return this.toolBarEntry;
    }

    /**
     * Gets the value of the floatable property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isFloatable() {
        if (floatable == null) {
            return false;
        } else {
            return floatable;
        }
    }

    /**
     * Sets the value of the floatable property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setFloatable(Boolean value) {
        this.floatable = value;
    }

    /**
     * Gets the value of the useRollover property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isUseRollover() {
        if (useRollover == null) {
            return false;
        } else {
            return useRollover;
        }
    }

    /**
     * Sets the value of the useRollover property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setUseRollover(Boolean value) {
        this.useRollover = value;
    }

    /**
     * Gets the value of the vertical property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isVertical() {
        if (vertical == null) {
            return false;
        } else {
            return vertical;
        }
    }

    /**
     * Sets the value of the vertical property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setVertical(Boolean value) {
        this.vertical = value;
    }

}
